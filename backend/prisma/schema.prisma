generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                @id @default(autoincrement())
  email               String             @unique
  pseudo              String             @unique
  sexe                String 
  password            String
  birthday            DateTime
  createdAt           DateTime           @default(now()) @map("created_at")
  updatedAt           DateTime           @updatedAt @map("updated_at")
  image               String?    
  organizedEvents     Event[]
  invitationsReceived EventInvitation[]  @relation("InvitationReceiver")
  invitationsSent     EventInvitation[]  @relation("InvitationSender")
  messagesSent        EventMessage[]
  joinedEvents        EventParticipant[]
  followers           Follow[]           @relation("Follower")
  following           Follow[]           @relation("Following")

  @@map("user")
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  Int      @map("follower_id")
  followingId Int      @map("following_id")
  followedAt  DateTime @default(now()) @map("followed_at")
  follower    User     @relation("Follower", fields: [followerId], references: [id])
  following   User     @relation("Following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@map("follow")
}

model Event {
  id              Int                @id @default(autoincrement())
  organizerId     Int                @map("organizer_id")
  name            String
  description     String?
  sport           String
  image           String?    
  maxParticipants Int                @map("max_participants")
  location        String
  visibility      EventVisibility    @default(PUBLIC)
  plannedAt       DateTime           @map("planned_at")
  createdAt       DateTime           @default(now()) @map("created_at")
  updatedAt       DateTime           @updatedAt @map("updated_at")
  organizer       User               @relation(fields: [organizerId], references: [id])
  invitations     EventInvitation[]
  messages        EventMessage[]
  participation   EventParticipant[]

  @@map("event")
}

model EventParticipant {
  id            Int      @id @default(autoincrement())
  participantId Int      @map("participant_id")
  eventId       Int      @map("event_id")
  canInvite     Boolean  @default(false)
  joinedAt      DateTime @default(now()) @map("joined_at")
  event         Event    @relation(fields: [eventId], references: [id])
  participant   User     @relation(fields: [participantId], references: [id])

  @@unique([participantId, eventId])
  @@map("event_participant")
}

model EventMessage {
  id       Int      @id @default(autoincrement())
  senderId Int      @map("sender_id")
  eventId  Int      @map("event_id")
  message  String
  sentAt   DateTime @default(now()) @map("sent_at")
  event    Event    @relation(fields: [eventId], references: [id])
  sender   User     @relation(fields: [senderId], references: [id])

  @@map("event_message")
}

model EventInvitation {
  id          Int              @id @default(autoincrement())
  eventId     Int              @map("event_id")
  inviterId   Int              @map("inviter_id")
  inviteeId   Int              @map("invitee_id")
  status      InvitationStatus @default(PENDING)
  sentAt      DateTime         @default(now()) @map("sent_at")
  respondedAt DateTime         @updatedAt @map("responded_at")
  event       Event            @relation(fields: [eventId], references: [id])
  invitee     User             @relation("InvitationReceiver", fields: [inviteeId], references: [id])
  inviter     User             @relation("InvitationSender", fields: [inviterId], references: [id])

  @@unique([eventId, inviteeId])
  @@map("event_invitation")
}

enum EventVisibility {
  PUBLIC
  PRIVATE
  FRIENDS
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELED
}
